1. SpringAOP
    1). 加入jar包
    <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.3</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>4.0.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>4.0.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>4.0.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
            <version>4.0.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>com.mchange</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.5.2</version>
        </dependency>


        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.11</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.10</version>
        </dependency>

        <!--下面四个是SpringAOP需要的包-->
        <dependency>
            <groupId>aopalliance</groupId>
            <artifactId>aopalliance</artifactId>
            <version>1.0</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.6.8</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>4.0.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>4.0.0.RELEASE</version>
        </dependency>

    2).在配置文件中加入aop命名空间
           xmlns:aop="http://www.springframework.org/schema/aop"

    3).基于注解的方式
        ①在配置文件中加入如下配置
            <!-- 使AspectJ注解起作用 : 自动为匹配的类生成代理对象-->
                <aop:aspectj-autoproxy/>
        ②把横切关注点的代码抽象到切面的类中.
            i.  切面首先是一个IoC中的bean,即加入@Component注解
            ii. 切面还需要加入@Aspect声明这个类是一个切面
        ③.在类中声明各种通知(通知其实就是一个方法)
            AspectJ 支持 5 种类型的通知注解:
                            @Before: 前置通知, 在方法执行之前执行
                            @After: 后置通知, 在方法执行之后执行
                            @AfterRunning: 返回通知, 在方法返回结果之后执行   @AfterReturning(value = "execution(public int DroidEye.AOP.Annotation.Impl.ArithmeticCalculator.*(..))",returning = "result")
                                                                           public void afterReturning(JoinPoint joinPoint,Object result)
                            @AfterThrowing: 异常通知, 在方法抛出异常之后     @AfterThrowing(value = "execution(public int DroidEye.AOP.Annotation.Impl.ArithmeticCalculator.*(..))",throwing = "ex")
                                                                           public void afterThrowing(JoinPoint joinPoint, Exception ex)
                            @Around: 环绕通知, 围绕着方法执行

            i.  声明一个方法
            ii. 在方法前加入@Before注解
        ④可以在通知方法中声明一个类型为JoinPoint的参数,然后就能访问连接细节,如方法名和参数值



